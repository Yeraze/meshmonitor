name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true  # Don't fail on lint errors for now

      - name: Run type checking
        run: npm run typecheck

      - name: Run tests
        run: npm run test:run -- --exclude="**/server.test.ts"

      - name: Generate coverage report
        if: matrix.node-version == '20.x'  # Only generate coverage on one version
        run: npm run test:coverage -- --exclude="**/server.test.ts"

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false  # Don't fail if codecov is down

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build server
        run: npm run build:server

      - name: Check build artifacts
        run: |
          echo "Checking frontend build..."
          ls -la dist/
          echo "Checking server build..."
          ls -la dist/server/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: meshmonitor:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm meshmonitor:test node --version
          docker run --rm meshmonitor:test ls -la /app/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Dependency audit
        run: npm audit --audit-level=moderate
        continue-on-error: true  # Don't fail on audit issues for now

  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.event_name == 'pull_request'

    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        continue-on-error: true  # Don't fail if we can't comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.pull_request.number;
            const { owner, repo } = context.repo;

            const comment = `## âœ… CI Checks Passed

            All tests and builds completed successfully!

            - **Tests**: All unit tests passing
            - **Type Check**: No TypeScript errors
            - **Build**: Frontend and server built successfully
            - **Docker**: Image builds successfully

            Ready for review! ðŸš€`;

            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('CI Checks')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: comment
              });
            }