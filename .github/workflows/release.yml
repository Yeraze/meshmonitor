name: Release Pipeline

on:
  release:
    types: [created, edited]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.0)'
        required: true
        type: string

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Version should be in format: v1.2.3 or v1.2.3-beta.1"
            exit 1
          fi
          echo "✅ Valid version format"

  test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-release

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true

      - name: Run type checking
        run: npm run typecheck

      - name: Run all tests
        run: npm run test:run

      - name: Generate coverage report
        if: matrix.node-version == '20.x'
        run: npm run test:coverage

      - name: Check coverage thresholds
        if: matrix.node-version == '20.x'
        run: |
          echo "Checking coverage thresholds..."
          # Add coverage threshold checks here when configured
          # npx nyc check-coverage --lines 80 --functions 80 --branches 80

  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, test-suite]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update package version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"  # Remove 'v' prefix if present
          npm version "$VERSION_NO_V" --no-git-tag-version --allow-same-version

      - name: Build frontend
        run: npm run build

      - name: Build server
        run: npm run build:server

      - name: Create release archive
        run: |
          tar -czf meshmonitor-${{ needs.validate-release.outputs.version }}.tar.gz \
            dist/ \
            package.json \
            package-lock.json \
            README.md \
            LICENSE

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: meshmonitor-*.tar.gz
          retention-days: 7

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-suite]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: vars.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            ${{ vars.DOCKERHUB_USERNAME && format('docker.io/{0}/meshmonitor', vars.DOCKERHUB_USERNAME) || '' }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}
            BUILD_DATE=${{ github.event.release.created_at || github.event.repository.updated_at }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-release:
    name: Update Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-suite, build-artifacts, docker-release]
    if: github.event_name == 'release'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-artifacts

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "## 🚀 MeshMonitor ${VERSION}" > release-notes.md
          echo "" >> release-notes.md
          echo "### 📦 Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo "**Docker (recommended):**" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo "docker run -d \\" >> release-notes.md
          echo "  --name meshmonitor \\" >> release-notes.md
          echo "  -p 8080:3001 \\" >> release-notes.md
          echo "  -v meshmonitor-data:/data \\" >> release-notes.md
          echo "  ghcr.io/${{ github.repository }}:${VERSION}" >> release-notes.md
          echo '```' >> release-notes.md
          echo "" >> release-notes.md
          echo "### 🧪 Testing" >> release-notes.md
          echo "✅ All tests passed" >> release-notes.md
          echo "✅ TypeScript checks passed" >> release-notes.md
          echo "✅ Docker images built for linux/amd64, linux/arm64, linux/arm/v7" >> release-notes.md
          echo "" >> release-notes.md
          echo "### 📋 Changes" >> release-notes.md
          echo "See commit history for detailed changes." >> release-notes.md

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: meshmonitor-*.tar.gz
          body_path: release-notes.md
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [validate-release, update-release]
    if: always()

    steps:
      - name: Create summary
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "# Release Summary for ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.update-release.result }}" = "success" ]; then
            echo "## ✅ Release Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- Docker images published to ghcr.io" >> $GITHUB_STEP_SUMMARY
            echo "- Release artifacts uploaded" >> $GITHUB_STEP_SUMMARY
            echo "- All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Release Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi