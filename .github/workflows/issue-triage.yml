name: Automated Issue Triage

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: read
  id-token: write  # Required for Claude Code Action OIDC authentication

concurrency:
  group: issue-triage-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  # Quick auto-labeling based on keywords (runs immediately, no API cost)
  auto-label:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'

    steps:
      - name: Auto-label based on keywords
        uses: actions/github-script@v8
        with:
          script: |
            const title = context.payload.issue.title.toLowerCase();
            const body = (context.payload.issue.body || '').toLowerCase();
            const labels = [];

            // Detect bug vs feature from title tags
            if (title.includes('[bug]')) {
              labels.push('bug');
            } else if (title.includes('[feat]') || title.includes('[feature]')) {
              labels.push('enhancement');
            }

            // Topic-based labels
            if (body.includes('docker') || title.includes('docker')) {
              labels.push('docker');
            }
            if (body.includes('apprise') || title.includes('apprise')) {
              labels.push('apprise');
            }
            if (body.includes('configuration') || body.includes('config') || title.includes('config')) {
              labels.push('configuration');
            }
            if (body.includes('meshtastic') || title.includes('meshtastic')) {
              labels.push('meshtastic');
            }
            if (body.includes('notification') || title.includes('notification')) {
              labels.push('notifications');
            }

            // Apply labels if any were detected
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
              console.log(`Auto-applied labels: ${labels.join(', ')}`);
            }

  # AI-powered triage for new issues
  triage-new-issue:
    runs-on: ubuntu-latest

    # Only run on new issues, skip bots
    if: |
      github.event_name == 'issues' &&
      github.event.action == 'opened' &&
      github.actor != 'dependabot[bot]' &&
      github.actor != 'github-actions[bot]'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Triage with Claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: "claude-sonnet-4-20250514"

          direct_prompt: |
            🤖 **Automated Issue Triage**

            A new issue has been submitted. Your job is to provide an initial response following these STRICT guidelines:

            ## Step 1: Classify the Issue

            First, determine if this is:
            - **BUG**: Something is broken or not working as expected
            - **FEATURE**: New functionality request or enhancement
            - **QUESTION**: User needs help or clarification
            - **DUPLICATE**: Already reported in another issue

            Note: Some issues labeled as bugs might actually be feature requests. Reclassify if needed.

            ## Step 2: Check for Duplicates

            Search both OPEN and CLOSED issues for similar reports:
            - Use Grep/Glob to search issue templates and existing issues
            - If you find a duplicate:
              1. Post a comment: "Closing as duplicate of #XXX" (reference the original issue number)
              2. Add the 'duplicate' label
              3. Close the issue
              4. STOP - do not continue analysis

            ## Step 3: Response Based on Type

            ### For BUG Reports:

            1. **Analyze the issue description** - what information is provided?
            2. **Check the codebase** - look for relevant code sections that might be involved
            3. **Search for similar patterns** - check if this is a known pattern
            4. **Provide diagnostic steps** - give the user specific commands/checks to run
            5. **Reference documentation** - link to relevant docs from:
               - https://meshmonitor.org (primary documentation)
               - https://meshtastic.org (Meshtastic protocol/device docs)
               - https://docs.docker.com (if Docker-related)
               - https://github.com/caronc/apprise/wiki (if Apprise/notifications)

            Your response should:
            - Start with "🤖 **Automated Triage**" header
            - Summarize what you understand about the bug
            - List specific diagnostic steps for the user to run
            - Include expected outputs for each step
            - Reference relevant documentation
            - Be helpful and professional

            Example format:
            ```
            🤖 **Automated Triage**

            Thank you for reporting this issue! This appears to be [brief summary of the bug].

            To help diagnose this issue, please run the following diagnostic steps:

            ### 1. [Diagnostic step name]
            [command or check to perform]
            [what to look for in output]

            ### 2. [Next diagnostic step]
            ...

            ### Documentation References
            - [Relevant meshmonitor.org link]
            - [Relevant external docs]

            Please share the outputs from these diagnostics, and I'll analyze the results.
            ```

            IMPORTANT: This is your FIRST response. Do not repeat the same diagnostic steps later.

            ### For FEATURE Requests:

            1. **Search the codebase** - look for similar existing features
            2. **Check closed issues/PRs** - see if this was already implemented or rejected
            3. **Search documentation** - find related features on meshmonitor.org
            4. **Provide links** - point user to existing documentation and similar features

            Your response should:
            - Start with "🤖 **Automated Triage**" header
            - Acknowledge the feature request
            - Link to any similar existing features with documentation
            - Reference relevant meshmonitor.org pages
            - Be concise - ONE response only
            - Do NOT continue the conversation beyond this first response

            Example format:
            ```
            🤖 **Automated Triage**

            Thank you for the feature request!

            We have some related functionality that might help:
            - [Existing Feature Name]: [link to meshmonitor.org docs]
            - [Related Feature]: [link to docs]

            You might also find these resources helpful:
            - [Relevant meshmonitor.org documentation]
            - [External documentation if applicable]

            A maintainer will review your request and provide feedback.
            ```

            ## Step 4: Apply Labels

            Based on your analysis, suggest labels by mentioning them in your response:
            - bug / enhancement / question / duplicate
            - docker / apprise / configuration / meshtastic / notifications
            - needs-maintainer-review (if the issue needs human attention)

            ## Available Tools

            You have access to:
            - Read: Read files from the codebase
            - Grep: Search for patterns in code
            - Glob: Find files by pattern
            - Bash: Run read-only commands (git log, gh issue list, etc.)

            Use these to understand the codebase and find similar issues/features.

            ## Important Reminders

            - Be professional and helpful
            - Identify yourself as automated (🤖 prefix)
            - For bugs: provide detailed diagnostics
            - For features: link to existing docs, one response only
            - For duplicates: close with reference to original
            - Liberally reference official documentation
            - Use tools to search codebase and issues

            Now analyze the issue and provide your response!

  # Follow-up analysis when users respond to bug diagnostic requests
  triage-followup:
    runs-on: ubuntu-latest

    # Only run on issue comments, skip bots, skip PR comments
    if: |
      github.event_name == 'issue_comment' &&
      github.event.action == 'created' &&
      !github.event.issue.pull_request &&
      github.actor != 'dependabot[bot]' &&
      github.actor != 'github-actions[bot]' &&
      github.actor != 'Yeraze'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Check if this is a bug issue needing follow-up
        id: check-bug
        uses: actions/github-script@v8
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);

            // Only analyze bugs that don't already have maintainer review
            const isBug = labels.includes('bug');
            const needsReview = labels.includes('needs-maintainer-review');

            console.log(`Is bug: ${isBug}, Needs review: ${needsReview}`);
            core.setOutput('should_analyze', isBug && !needsReview);

      - name: Follow-up Analysis with Claude
        if: steps.check-bug.outputs.should_analyze == 'true'
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: "claude-sonnet-4-20250514"

          direct_prompt: |
            🤖 **Automated Follow-up Analysis**

            The user has responded to a bug report with additional information. Your job is to analyze their response and determine next steps.

            ## Your Task

            1. **Read the full issue thread** - understand the original bug and all responses
            2. **Analyze the diagnostic results** - what did the user provide?
            3. **Determine if there's new information** - can we make progress?
            4. **Decide on next action**:
               - If NEW useful information → provide next diagnostic steps
               - If NO new information OR stuck → tag @Yeraze and add 'needs-maintainer-review' label
               - If issue appears RESOLVED → ask user to confirm, suggest closing

            ## Response Guidelines

            ### If you have next steps:
            ```
            🤖 **Follow-up Analysis**

            Thank you for providing those diagnostics! Based on the results, I can see [what you learned].

            Next steps:

            ### [Next diagnostic or fix to try]
            [specific instructions]

            [Continue with additional steps if needed]
            ```

            ### If you're stuck or no new info:
            ```
            🤖 **Follow-up Analysis**

            Thank you for the additional information. Based on what you've provided, this issue requires maintainer attention.

            @Yeraze - This issue needs your review. Summary:
            - [Brief summary of the issue]
            - [What diagnostics were run]
            - [Current status/findings]

            [Add 'needs-maintainer-review' label by mentioning it]
            ```

            ## Important Rules

            - Do NOT repeat the same diagnostic steps that were already requested
            - Do NOT continue asking for the same information
            - If stuck after 2-3 back-and-forth exchanges → escalate to @Yeraze
            - Be honest when you've reached the limit of automated triage
            - Continue referencing documentation when relevant

            Now analyze the user's response and provide your follow-up!
